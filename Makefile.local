.PHONY: default
default: all-setup

#################
.PHONY: build-snapshot
build-snapshot:
	HEAD_SHA=$(shell git rev-parse --short HEAD) goreleaser release --snapshot --clean --skip-publish --skip-sign

#################
.PHONY: all-setup
all-setup: create-cluster deploy-gateway-api deploy-bifrost-crds deploy-bifrost-blueprint deploy-bifrost-getting-started-usecase

#################
.PHONY: create-cluster
create-cluster:
	kind create cluster --config testdata/kind-config.yaml

.PHONY: delete-cluster
delete-cluster:
	kind delete cluster

#################
GATEWAY_API_VERSION ?= v1.0.0

.PHONY: gateway-api-upstream-get
gateway-api-upstream-get:
	mkdir -p upstream-gateway-api-crds
	kubectl kustomize "github.com/kubernetes-sigs/gateway-api/config/crd?ref=$(GATEWAY_API_VERSION)" > upstream-gateway-api-crds/crds.yaml
	#kubectl kustomize "github.com/kubernetes-sigs/gateway-api/config/crd/experimental?ref=$(GATEWAY_API_VERSION)" > upstream-gateway-api-crds/crds.yaml

.PHONY: deploy-gateway-api
deploy-gateway-api:
	kubectl apply -f upstream-gateway-api-crds

#################
# See https://github.com/tv2-oss/bifrost-gateway-controller
BIFROST_VERSION ?= 0.0.21

.PHONY: deploy-bifrost-crds
deploy-bifrost-crds:
	kubectl apply -f https://github.com/tv2-oss/bifrost-gateway-controller/releases/download/${BIFROST_VERSION}/crds.yaml

.PHONY: deploy-bifrost-blueprint
deploy-bifrost-blueprint:
	kubectl apply -f https://github.com/tv2-oss/bifrost-gateway-controller/releases/download/${BIFROST_VERSION}/gatewayclassblueprint-aws-alb-crossplane.yaml
	kubectl apply -f https://github.com/tv2-oss/bifrost-gateway-controller/releases/download/${BIFROST_VERSION}/gatewayclass-aws-alb-crossplane.yaml
	kubectl create ns bifrost-gateway-controller-system || true
	kubectl apply -f ${BIFROST_URL}/test-data/gatewayclassconfig-aws-alb-crossplane-dev-env.yaml

GATEWAY_CLASS_NAME ?= aws-alb-crossplane-public
DOMAIN ?= foo.example.com
BIFROST_URL ?= https://raw.githubusercontent.com/tv2-oss/bifrost-gateway-controller/${BIFROST_VERSION}

.PHONY: deploy-bifrost-getting-started-usecase
deploy-bifrost-getting-started-usecase:
	kubectl apply -f ${BIFROST_URL}/test-data/getting-started/foo-namespaces.yaml
	curl -s ${BIFROST_URL}/test-data/getting-started/foo-gateway.yaml | GATEWAY_CLASS_NAME=${GATEWAY_CLASS_NAME} DOMAIN=${DOMAIN} envsubst | kubectl apply -f -
	kubectl -n foo-site apply -f ${BIFROST_URL}/test-data/getting-started/app-foo-site.yaml
	kubectl -n foo-site apply -f ${BIFROST_URL}/test-data/getting-started/foo-site-httproute.yaml
	kubectl -n foo-store apply -f ${BIFROST_URL}/test-data/getting-started/app-foo-store-v1.yaml
	kubectl -n foo-store apply -f ${BIFROST_URL}/test-data/getting-started/app-foo-store-v2.yaml
	kubectl -n foo-store apply -f ${BIFROST_URL}/test-data/getting-started/foo-store-httproute.yaml
	curl -s ${BIFROST_URL}/hack/demo/namespace-gatewayclassconfig.yaml | CERTIFICATE_ARN=arn:xxx:yyy:123456 envsubst | kubectl apply -f -
	kubectl apply -f ${BIFROST_URL}/hack/demo/user-gateway-acl.yaml

#################
ISTIO_VERSION ?= 1.18.0

.PHONY: deploy-istio
deploy-istio:
	helm upgrade -i --repo https://istio-release.storage.googleapis.com/charts base base     --version ${ISTIO_VERSION} -n istio-system --create-namespace
	helm upgrade -i --repo https://istio-release.storage.googleapis.com/charts istiod istiod --version ${ISTIO_VERSION} -n istio-system

#################
.PHONY: example-graph
example-graph:
	bin/linux_amd64/gateway-api-lens --gwc-param-path spec.values --show-effective-policies --show-policies -o graph | dot -Tsvg > output.svg

.PHONY: test-run
test-run: example-graph
	echo "Testing 'example-graph'"
	if (( `cat output.svg | wc -l` < 400 )); then exit 1; fi
	bin/linux_amd64/gateway-api-lens --gwc-param-path spec.values --show-policies=false -o graph | dot -Tsvg > output.svg
	echo "Testing run 1"
	if (( `cat output.svg | wc -l` < 280 )); then exit 1; fi
	bin/linux_amd64/gateway-api-lens --gwc-param-path spec.values --show-effective-policies --show-policies=false -o graph | dot -Tsvg > output.svg
	echo "Testing run 2"
	if (( `cat output.svg | wc -l` < 380 )); then exit 1; fi
	bin/linux_amd64/gateway-api-lens --gwc-param-path spec.values --show-effective-policies --show-policies -o graph | dot -Tsvg > output.svg
	echo "Testing run 3"
	if (( `cat output.svg | wc -l` < 400 )); then exit 1; fi
	bin/linux_amd64/gateway-api-lens --gwc-param-path spec.values -o policy > output.txt
	echo "Testing run 4"
	if (( `cat output.txt | wc -l` < 5 )); then exit 1; fi
	grep -q foo-infra output.txt
	bin/linux_amd64/gateway-api-lens --gwc-param-path spec.values -o hierarchy > output.txt
	echo "Testing run 5"
	if (( `cat output.txt | wc -l` < 5 )); then exit 1; fi
	grep -q foo-infra output.txt
	bin/linux_amd64/gateway-api-lens --gwc-param-path spec.values -o route-tree > output.txt
	echo "Testing run 6"
	if (( `cat output.txt | wc -l` < 4 )); then exit 1; fi
	grep -q PathPrefix output.txt
